#!/bin/bash

# Get the current commit message
commit_msg_file=$1
if [ ! -f "$commit_msg_file" ] || [ ! -r "$commit_msg_file" ]; then
  echo "Error: Cannot read commit message file"
  exit 1
fi
commit_msg=$(cat "$commit_msg_file")

# Get the branch name.
branch_name=$(git symbolic-ref --short HEAD 2>/dev/null)

# Check if branch name follows the pattern [category]/[issue_number]
if [[ $branch_name =~ ^[a-z]+/[0-9]+$ ]]; then
  # Extract issue number from branch name
  issue_number=$(echo "$branch_name" | cut -d '/' -f 2)

  # Check if the commit message already mentions the issue number.
  if ! grep -q "$issue_number" <<< "$commit_msg"; then
    # Add the issue number to the commit message body.
    # Split the commit message into subject and body
    subject=$(head -n 1 "$commit_msg_file")

    # Check if there's a body (more than one line)
    if [ "$(wc -l < "$commit_msg_file")" -gt 1 ]; then
        #Get the body (skipping the first line)
        body=$(tail -n + 2 "$commit_msg_file")
        # Add a reference to the issue at the end of the body
        echo -e "$subject\n$body\n\n#$issue_number" > "$commit_msg_file"
    else
      # No body, so add one with the issue reference
      echo -e "$subject\n\n#$issue_number" > "$commit_msg_file"
    fi
  fi
else
  # Skip if branch name doesn't match the convention
  echo "Branch name does not follow the pattern [category]/[issue_number]. Skip issue number check."
fi

# Determine the repository root
repo_root=$(git rev-parse --show-toplevel)

# Configuration file location
validation_yaml="$repo_root/infra/config/validation.yaml"

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

if ! command_exists yq; then
  echo "yq is not installed. Installing..."

  if command_exists brew; then
    brew install yq
  elif command_exists apt; then
    sudo apt update && sudo apt install -y yq
  elif command_exists yum; then
    sudo yum install -y yq
  elif command_exists apk; then
    apk add --no-cache yq
  else
    echo "Error: No compatible package manager found. Please install yq manually."
    exit 1
  fi
fi

echo "yq is installed."

# Extract the first line (title)
commit_title=$(echo "$commit_msg" | head -n 1)

# Extract keyword, scope, and description from the commit title
COMMIT_PATTERN='^([a-z]+)(\([A-Za-z0-9]+\))?: (.+)$'

echo "Validating commit title: $commit_title"

# Check if commit title matches the full pattern
if [[ ! "$commit_title" =~ $COMMIT_PATTERN ]]; then
  echo "‚ùå Invalid commit message format! Expected: <type>(<scope>): <description>"

  # Debugging: Check where it failed
  if ! [[ "$commit_title" =~ ^[a-z]+ ]]; then
    echo "üîç Error: The keyword is missing or not lowercase."
  fi

  if ! [[ "$commit_title" =~ \(([A-Za-z0-9/-]+)\) ]]; then
    echo "üîç Error: Scope is missing or has invalid characters."
  fi

  if ! [[ "$commit_title" =~ :\  ]]; then
    echo "üîç Error: The colon separator is missing or incorrect."
  fi

  if ! [[ "$commit_title" =~ :\ (.+)$ ]]; then
    echo "üîç Error: Description is missing after ':'."
  fi

  exit 1
fi

# Debugging: Show extracted values
COMMIT_KEYWORD="${BASH_REMATCH[1]}"
COMMIT_SCOPE_RAW="${BASH_REMATCH[2]}"  # e.g. "(Git)"
COMMIT_DESCRIPTION="${BASH_REMATCH[3]}"

# Use parameter expansion to remove '(' and ')'
COMMIT_SCOPE="${COMMIT_SCOPE_RAW#(}"   # e.g. "Git)"
COMMIT_SCOPE="${COMMIT_SCOPE%)}"       # e.g. "Git"

echo "Keyword: $COMMIT_KEYWORD"
echo "Scope: $COMMIT_SCOPE"
echo "Description: $COMMIT_DESCRIPTION"

# Confirm the keyword exists.
keyword_exists="$(
  yq e ".allowed_keywords[] | select(.name == \"$COMMIT_KEYWORD\") | .name" \
  "$validation_yaml"
)"

if [[ -z "$keyword_exists" ]]; then
  echo "‚ùå Invalid keyword: $COMMIT_KEYWORD"

  # Print out the list of all allowed keywords as comma-separated on one line
  allowed_keywords="$(
    yq e '.allowed_keywords[].name' "$validation_yaml" \
    | paste -sd ',' -
  )"

  echo "‚úÖ Allowed keywords are: $allowed_keywords"

  exit 1
fi

# Check requires_scope
keyword_requires_scope="$(
  yq e ".allowed_keywords[] | select(.name == \"$COMMIT_KEYWORD\") | .requires_scope" \
    "$validation_yaml"
)"

if [[ "$keyword_requires_scope" == "true" ]]; then
  if [[ -z "$COMMIT_SCOPE" ]]; then
    echo "‚ùå The keyword '$COMMIT_KEYWORD' requires a scope, but none was provided."
    exit 1
  fi

  # Check allowed scopes
  allowed_scopes="$(
    yq e ".allowed_keywords[] | select(.name == \"$COMMIT_KEYWORD\") | .scopes[]" "$validation_yaml"
  )"

  allowed_scopes_csv="$(
    echo "$allowed_scopes" \
    | paste -sd ',' -
  )"

  if ! echo "$allowed_scopes" | grep -qx "$COMMIT_SCOPE"; then
    echo "‚ùå Scope '$COMMIT_SCOPE' is not in the allowed scopes for '$COMMIT_KEYWORD'."
    echo "‚úÖ Allowed scopes are:"
    echo "$allowed_scopes_csv"
    exit 1
  fi

else # requires_scope == "false"
  if [[ -n "$COMMIT_SCOPE" ]]; then
    echo "‚ùå The keyword '$COMMIT_KEYWORD' does not allow a scope, but one was provided ($COMMIT_SCOPE)."
    exit 1
  fi
fi

echo "‚úÖ Valid commit message!"
