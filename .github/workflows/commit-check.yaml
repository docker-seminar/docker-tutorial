name: Commit & Branch Validation
on:
  pull_request:
    branches: [ main ]
permissions:
  pull-requests: write
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PR_NUMBER: ${{ github.event.pull_request.number }}
jobs:
  validate-commit-messages:
    name: Check Commit Messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Validate branch name
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          echo "Validating branch name '$BRANCH_NAME'..."
          pattern='^[a-z]+/[0-9]+$'
          
          if [[ ! $BRANCH_NAME =~ $pattern ]]; then
            gh pr comment "$PR_NUMBER" --body "> [!WARNING]
            > Invalid branch name!
          
            The branch name '$BRANCH_NAME' does not follow the required pattern: '<category>/<issue_number>' format.
            Please rename your branch.
          
            > [!IMPORTANT]
            > Refer to `.github/CONTRIBUTING.md` for detailed branch naming convention."
          
            exit 1
          fi
          
          issue_number=$(echo "$BRANCH_NAME" | cut -d '/' -f 2)
          echo "ISSUE_NUMBER=$issue_number" >> $GITHUB_ENV
      - name: Validate commit message
        id: validate-commit-message
        run: |
          echo "Validating commit messages..."
          comment_body=""
          invalid_commit_messages_count=0
          missing_issue_number_count=0
          
          for commit in $(git rev-list --no-merges origin/main..HEAD); do
            echo "Validating commit: '$commit'"
          
            commit_message=$(git log -n 1 --format=%B "$commit")
            commit_title=$(echo "$commit_message" | head -n 1)
            issue_reference=$(echo "$commit_message" | tail -n 1)
          
            echo "Validating commit title: '$commit_title'"
          
            # Check if the child script reported an error
            if ! source infra/scripts/conventional-titles/parse-title.sh "$commit_title"; then
              ((invalid_commit_messages_count++))
              comment_body="${comment_body}"$'\n\n---\n'"$MESSAGES"
            fi
          
            # Chuck if commit message references a issue number
            if ! grep -q "#$ISSUE_NUMBER" <<< "$issue_reference"; then
              ((missing_issue_number_count++))
              message="Missing issue reference in commit $commit."
              comment_body="${comment_body}"$'\n\n---\n'"$message"
            fi
          done
          
          if [[ $invalid_commit_messages_count -gt 0 || $missing_issue_number_count -gt 0 ]]; then
            gh pr comment "$PR_NUMBER" --body "> [!WARNING]
            > Found $invalid_commit_messages_count commits with invalid a commit message title!
            > Found $missing_issue_number_count commits with missing issue reference in commit message body!
          
            ${comment_body}"
          fi
  check-branch-up-to-date:
    name: "Ensure Branch is Up-to-Date"
    runs-on: ubuntu-latest
    env:
      PULL_REQUEST_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Fetch main branch"
        run: git fetch origin main

      - name: "Check if branch is up-to-date"
        run: |
          BEHIND_COUNT=$(git rev-list --count "$PULL_REQUEST_HEAD_SHA"..origin/main)
          if [ "$BEHIND_COUNT" -gt 0 ]; then
            gh pr comment "$PR_NUMBER" --body "> [!WARNING]
            > **Branch is behind main by "$BEHIND_COUNT" commits.**
            Please rebase before merging."
            exit 1
          fi